{"version":3,"sources":["components/Movies.js","components/MovieForm.js","App.js","serviceWorker.js","index.js"],"names":["Movies","movies","List","map","movie","Item","key","title","Header","Rating","rating","maxRating","disabled","MovieForm","onNewMovie","useState","setTitle","setRating","Form","Field","Input","placeholder","value","onChange","e","target","icon","onRate","_","data","Button","onClick","a","fetch","method","headers","body","JSON","stringify","ok","console","log","App","setMovies","useEffect","then","response","json","className","currentMovies","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wTAGaA,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvB,OACE,kBAACC,EAAA,EAAD,KACGD,EAAOE,KAAI,SAAAC,GACV,OACE,kBAACF,EAAA,EAAKG,KAAN,CAAWC,IAAKF,EAAMG,OACpB,kBAACC,EAAA,EAAD,KAASJ,EAAMG,OACf,kBAACE,EAAA,EAAD,CAAQC,OAAQN,EAAMM,OAAQC,UAAW,EAAGC,UAAQ,IACpD,6BAAM,6BAAM,mC,qDCRXC,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACjBC,mBAAS,IADQ,mBACpCR,EADoC,KAC7BS,EAD6B,OAEfD,mBAAS,GAFM,mBAEpCL,EAFoC,KAE5BO,EAF4B,KAI3C,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,cACZC,MAAOf,EACPgB,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOH,WAGrC,kBAACJ,EAAA,EAAKC,MAAN,KACE,kBAACV,EAAA,EAAD,CACEiB,KAAK,OACLhB,OAAQA,EACRC,UAAW,EACXgB,OAAQ,SAACC,EAAGC,GACVZ,EAAUY,EAAKnB,YAIrB,kBAACQ,EAAA,EAAKC,MAAN,KACE,kBAACW,EAAA,EAAD,CACEC,QAAO,sBAAE,4BAAAC,EAAA,6DACD5B,EAAQ,CAAEG,QAAOG,UADhB,SAEgBuB,MAAM,aAAc,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUlC,KAPhB,cAUMmC,KACXC,QAAQC,IAAI,oBACZ3B,EAAWV,GACXY,EAAS,IACTC,EAAU,IAdL,4CADX,aCEOyB,MAxBf,WAAgB,IAAD,EACe3B,mBAAS,IADxB,mBACNd,EADM,KACE0C,EADF,KAWb,OARAC,qBAAU,WACRX,MAAM,WAAWY,MAAK,SAAAC,GAAQ,OAC5BA,EAASC,OAAOF,MAAK,SAAAhB,GACnBc,EAAUd,EAAK5B,gBAGlB,IAGD,yBAAK+C,UAAU,OACb,qCACA,kBAAC,EAAD,CACElC,WAAY,SAAAV,GAAK,OACfuC,GAAU,SAAAM,GAAa,OAAK7C,GAAL,mBAAe6C,UAG1C,kBAAC,EAAD,CAAQhD,OAAQA,MCZFiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.ae327c74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { List, Header, Rating } from \"semantic-ui-react\";\r\n\r\nexport const Movies = ({ movies }) => {\r\n  return (\r\n    <List>\r\n      {movies.map(movie => {\r\n        return (\r\n          <List.Item key={movie.title}>\r\n            <Header>{movie.title}</Header>\r\n            <Rating rating={movie.rating} maxRating={5} disabled />\r\n            <br /><br /><br />\r\n          </List.Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};","import React, { useState } from \"react\";\r\nimport { Form, Input, Rating, Button } from \"semantic-ui-react\";\r\n\r\nexport const MovieForm = ({ onNewMovie }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [rating, setRating] = useState(1);\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Field>\r\n        <Input\r\n          placeholder=\"movie title\"\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n        />\r\n      </Form.Field>\r\n      <Form.Field>\r\n        <Rating\r\n          icon=\"star\"\r\n          rating={rating}\r\n          maxRating={5}\r\n          onRate={(_, data) => {\r\n            setRating(data.rating);\r\n          }}\r\n        />\r\n      </Form.Field>\r\n      <Form.Field>\r\n        <Button\r\n          onClick={async () => {\r\n            const movie = { title, rating };\r\n            const response = await fetch(\"/add_movie\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify(movie)\r\n            });\r\n\r\n            if (response.ok) {\r\n              console.log(\"response worked!\");\r\n              onNewMovie(movie);\r\n              setTitle(\"\");\r\n              setRating(1);\r\n            }\r\n          }}\r\n        >\r\n          submit\r\n        </Button>\r\n      </Form.Field>\r\n    </Form>\r\n  );\r\n};","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Movies } from './components/Movies';\nimport { MovieForm } from \"./components/MovieForm\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetch('/movies').then(response => \n      response.json().then(data => {\n        setMovies(data.movies);\n      })\n    );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>hello</h1>\n      <MovieForm\n        onNewMovie={movie =>\n          setMovies(currentMovies => [movie, ...currentMovies])\n        }\n      />\n      <Movies movies={movies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}